// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`remark-deflist with a standard parser should parse a basic definition list 1`] = `"<dl><dt>Term 1</dt><dd>Definition 1</dd></dl>"`;

exports[`remark-deflist with a standard parser should parse a definition list with continuation 1`] = `
"<dl><dt>Term 1</dt><dd>Definition
with continuation.</dd></dl>"
`;

exports[`remark-deflist with a standard parser should parse a definition list with inline markup 1`] = `"<dl><dt>Term <em>1</em></dt><dd>Definition <strong>1</strong></dd></dl>"`;

exports[`remark-deflist with a standard parser should parse a definition list with lazy continuation 1`] = `
"<dl><dt>Term 1</dt><dd>Definition
with lazy continuation.</dd></dl>"
`;

exports[`remark-deflist with a standard parser should parse a definition list with multiple descriptions (#9) 1`] = `"<dl><dt>Multiple descriptions</dt><dd>Description <strong>1</strong></dd><dd>Description 2</dd></dl>"`;

exports[`remark-deflist with a standard parser should parse a definition list with no space between the term and the descriptions (#7) 1`] = `"<dl><dt>Term <strong>1</strong></dt><dd>Definition <strong>bold</strong> 1</dd><dd>Definition 2</dd></dl>"`;

exports[`remark-deflist with a standard parser should parse a document with other elements 1`] = `
"<dl><dt>Definition List</dt><dd>Definition 1</dd></dl>
<p>This paragraph follows the definition list.</p>"
`;

exports[`remark-deflist with a standard parser should parse a document with several subsequent definition lists (#10) 1`] = `"<dl><dt>Definition List 1</dt><dd>Description 1</dd><dt>Definition List 2</dt><dd>Description 1</dd><dt>Definition List 3</dt><dd>Description 1</dd></dl>"`;

exports[`remark-deflist with an mdx parser should parse a basic definition list 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Term 1\\"}</dt><dd parentName=\\"dl\\">{\\"Definition 1\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with another plugin syntax 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Definition List 1\\"}</dt><dd parentName=\\"dl\\">{\\"Definition^1, H\\"}<sub parentName=\\"dd\\">{\\"2\\"}</sub>{\\"0\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with continuation 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Term 1\\"}</dt><dd parentName=\\"dl\\">{\\"Definition\\\\nwith continuation.\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with inline html 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Cat\\"}</dt><dd parentName=\\"dl\\">{\\"Definition \\"}<b parentName=\\"dd\\">{2 + 5}</b></dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with inline markup 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Term \\"}<em parentName=\\"dt\\">{\\"1\\"}</em></dt><dd parentName=\\"dl\\">{\\"Definition \\"}<strong parentName=\\"dd\\">{\\"1\\"}</strong></dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with jsx 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Definition List 1\\"}</dt><dd parentName=\\"dl\\">{\\"Definition \\"}<b parentName=\\"dd\\">{2 + 5}</b></dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with lazy continuation 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Term 1\\"}</dt><dd parentName=\\"dl\\">{\\"Definition\\\\nwith lazy continuation.\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with multiple descriptions (#9) 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Multiple descriptions\\"}</dt><dd parentName=\\"dl\\">{\\"Description \\"}<strong parentName=\\"dd\\">{\\"1\\"}</strong></dd><dd parentName=\\"dl\\">{\\"Description 2\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a definition list with no space between the term and the descriptions (#7) 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Term \\"}<strong parentName=\\"dt\\">{\\"1\\"}</strong></dt><dd parentName=\\"dl\\">{\\"Definition \\"}<strong parentName=\\"dd\\">{\\"bold\\"}</strong>{\\" 1\\"}</dd><dd parentName=\\"dl\\">{\\"Definition 2\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a document with other elements 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Definition List\\"}</dt><dd parentName=\\"dl\\">{\\"Definition 1\\"}</dd></dl><p>{\\"This paragraph follows the definition list.\\"}</p></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;

exports[`remark-deflist with an mdx parser should parse a document with several subsequent definition lists (#10) 1`] = `
"/* @jsxRuntime classic */
/* @jsx mdx */
/* @jsxFrag mdx.Fragment */
const MDXLayout = \\"wrapper\\";
function MDXContent({components, ...props}) {
  return <MDXLayout components={components} {...props}><dl><dt parentName=\\"dl\\">{\\"Definition List 1\\"}</dt><dd parentName=\\"dl\\">{\\"Description 1\\"}</dd><dt parentName=\\"dl\\">{\\"Definition List 2\\"}</dt><dd parentName=\\"dl\\">{\\"Description 1\\"}</dd><dt parentName=\\"dl\\">{\\"Definition List 3\\"}</dt><dd parentName=\\"dl\\">{\\"Description 1\\"}</dd></dl></MDXLayout>;
}
MDXContent.isMDXComponent = true;
export default MDXContent;
"
`;
